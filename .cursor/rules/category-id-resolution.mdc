---
description: Category ID matching must be robust, accounting for case normalization, subcategory handling, and budget/group hierarchy awareness. The current implementation uses direct string comparison, leading to frequent mismatches.
globs: **/*.py
rule_name: Category ID Resolution
---
{
  "implementation_guidelines": [
    "Implement a `find_category_id()` method that performs case-insensitive matching.",
    "Handle subcategories by checking if the input string is a substring of the full category name (e.g., 'Food:Groceries').",
    "Iterate through category groups and their categories to find the correct ID.",
    "Normalize input and category names by converting them to lowercase and stripping whitespace.",
    "Return `None` if no matching category is found."
  ],
  "code_example": "def find_category_id(self, category_name: str):\n    normalized_input = category_name.lower().strip()\n    for group in self.category_groups:\n        for category in group.categories:\n            if normalized_input in category.name.lower():\n                return category.id\n    return None",
  "best_practices": [
    "Cache category IDs to improve performance.",
    "Provide informative error messages when a category ID cannot be found.",
    "Consider using fuzzy matching algorithms for more lenient category name matching.",
    "Update the category cache periodically to reflect changes in the budget."
  ],
  "dependencies": []
}