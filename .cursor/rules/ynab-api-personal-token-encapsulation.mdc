---
description: Encapsulate YNAB API token handling within a dedicated client class.
globs: *_client.py
---
{
  "rule_name": "YNAB API - Personal Token Encapsulation",
  "implementation_guidelines": [
    "Create a `YNABClient` class that handles API authentication and requests. Implement exponential backoff for rate limits and schema validation using Pydantic. This improves API reliability and testability.",
    "python",
    "import requests",
    "class YNABClient:",
    "def __init__(self, personal_token):",
    "self.base_url = \"https://api.ynab.com/v1\"",
    "self.headers = {",
    "\"Authorization\": f\"Bearer {personal_token}\",",
    "\"Content-Type\": \"application/json\"",
    "}",
    "def get_budgets(self):",
    "response = requests.get(f\"{self.base_url}/budgets\", headers=self.headers)",
    "return response.json()[\"data\"][\"budgets\"]"
  ],
  "code_examples": [],
  "best_practices": [],
  "dependencies": []
}