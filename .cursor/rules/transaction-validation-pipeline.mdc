---
description: Implement a transaction validation pipeline to prevent duplicate transactions, handle future-dated transactions, and support split transactions. The current implementation directly calls the API without pre-validation.
globs: **/*YNABClient.py
rule_name: Transaction Validation Pipeline
---
{
  "implementation_guidelines": [
    "Implement a duplicate detection mechanism (e.g., by comparing transaction amounts, dates, payees, and categories).",
    "Check if the transaction date is in the future and reject future-dated transactions.",
    "Implement support for split transactions (transactions with multiple categories).",
    "Create a `TransactionValidator` class or function to encapsulate the validation logic.",
    "Raise exceptions for invalid transactions (e.g., `DuplicateTransactionError`, `FutureDateError`)."
  ],
  "code_example": "def create_transaction(self, transaction_data):\n    if self._is_duplicate(transaction_data):\n        raise DuplicateTransactionError\n    if transaction_data[\"date\"] > datetime.now().date():\n        raise FutureDateError\n    # Proceed with API call",
  "best_practices": [
    "Use a consistent pattern for validating transactions.",
    "Log invalid transactions for debugging purposes.",
    "Provide informative error messages to the user.",
    "Implement a configuration option to disable transaction validation."
  ],
  "dependencies": []
}