---
description: API credentials (YNAB access token, Gemini API key, budget ID) must be injected into the container class using environment variables. The current implementation uses hardcoded references, leading to authentication errors.
globs: **/*Container.py
rule_name: Dependency Injection for API Credentials
---
{
  "implementation_guidelines": [
    "Use `os.getenv()` to retrieve credentials from environment variables.",
    "Pass the retrieved credentials to the `YNABClient` and `GeminiSpendingAnalyzer` constructors.",
    "Ensure that environment variables are properly set in the deployment environment.",
    "Implement error handling to catch missing environment variables."
  ],
  "code_example": "class Container:\n    def __init__(self):\n        self.ynab_client = YNABClient(\n            os.getenv(\"YNAB_TOKEN\"),\n            os.getenv(\"YNAB_BUDGET_ID\")\n        )\n        self.gemini_analyzer = GeminiSpendingAnalyzer(\n            os.getenv(\"GEMINI_API_KEY\")\n        )",
  "best_practices": [
    "Use a `.env` file for local development to manage environment variables.",
    "Implement a secrets management solution for production environments.",
    "Avoid storing credentials directly in the code.",
    "Use a dependency injection framework to manage dependencies."
  ],
  "dependencies": []
}