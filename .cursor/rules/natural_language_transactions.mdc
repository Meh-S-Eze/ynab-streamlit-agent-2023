---
description: Natural Language Transaction Processing Guidelines
globs: cli/natural_language_cli.py,core/pydantic_ai_transaction_parser.py,core/shared_models.py,core/ynab_client.py,core/transaction_*.py,core/natural_language_*.py,core/date_utils.py
alwaysApply: false
---
# Natural Language Transaction Processing Guidelines
# This file defines critical rules to maintain when making changes to the natural language
# transaction processing functionality in the YNAB assistant.

# Critical Components:
critical_components:
  dynamic_date_handling:
    description: "Dynamic date handling is required for processing relative dates like 'yesterday', 'last week', etc."
    implementation: |
      The transaction parser agent MUST include the current date in its system prompt:
      
      ```python
      @agent.system_prompt
      def add_current_date() -> str:
          from datetime import date
          today = date.today()
          return f"Today's date is {today.isoformat()}. Use this as a reference for resolving relative dates."
      ```
      
      This ensures the AI model has an up-to-date reference point for resolving relative dates.
    
  amount_handling:
    description: "Transaction amounts must be correctly parsed from natural language input"
    requirements:
      - All transaction amounts must be correctly identified as inflow or outflow based on context
      - Amount values must be preserved during processing, not defaulting to 0 or hardcoded values
      - Decimal conversion must handle different currencies and formats
  
  agent_configuration:
    description: "The Pydantic AI agent must be properly configured"
    requirements:
      - The agent must use a compatible AI model (Gemini or equivalent)
      - System prompts must provide clear extraction guidelines
      - Temperature should be set to 0.0 for deterministic output
      - Result schema must be properly defined using TransactionData model

# Testing Requirements:
testing_requirements:
  - All changes must be tested with queries containing relative dates (yesterday, last week, etc.)
  - All changes must be tested with both expense and income transactions
  - All changes must be tested with different amount formats ($50, 50 dollars, etc.)
  - Changes must not break payee extraction and matching

# Debugging Guidelines:
debugging:
  debug_logging:
    description: "Debug logging must be preserved to assist in troubleshooting"
    requirements:
      - Keep detailed logging of parsed transaction data
      - Log any conversion errors or fallbacks
      - Preserve the logging of final transaction creation requests and responses

# Change Review Process:
change_review:
  - Before merging changes, verify with manual tests that the natural language transaction functionality works correctly
  - Test with both absolute and relative dates
  - Test with both expense and income transactions
  - Test with various amount formats 